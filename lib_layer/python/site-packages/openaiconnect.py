import os
import openai
import logging
import boto3
import json

class OpenAIAgent:
    """
    OpenAIAgent: A library to simplify interactions with OpenAI's GPT models.

    This agent helps to encapsulate OpenAI's GPT API interaction, allowing for easy extraction
    of generated responses based on provided context.

    Attributes:
        gpt_api_key (str): The API key to authenticate with OpenAI.
        model (str): The specific GPT model version to be used.
        max_tokens (int): Maximum length of the response.
        temperature (float): Sampling temperature.
        top_p (float): Nucleus sampling parameter.
        frequency_penalty (float): Adjust model likelihood of token frequency.
        presence_penalty (float): Adjust model likelihood of token presence.

    Author: Amit Rai
    Date: Oct 24, 2023 
    Version: 1.0.0
    """

    def __init__(self, config=None, region_name=None):
        """
        Initializes the OpenAIAgent with provided or default configurations.

        Args:
            config (dict): Configuration dictionary.
            region_name (str): AWS region name for Secrets Manager.
        """

        if config is None:
            config = {}

        # Fetch OpenAI API Key from AWS Secrets Manager if region_name is provided
        self.gpt_api_key = self.get_secret(config.get("secret_name"),config.get("secret_key_name"), region_name) 
        openai.api_key = self.gpt_api_key
        self.model = config.get("model", "gpt-3.5-turbo")
        self.max_tokens = config.get("max_tokens", 150)
        self.temperature = config.get("temperature", 0.7)
        self.top_p = config.get("top_p", 1.0)
        self.frequency_penalty = config.get("frequency_penalty", 0.0)
        self.presence_penalty = config.get("presence_penalty", 0.0)

    def get_secret(self, secret_name, secret_key_name, region_name):
        """
        Fetch secret from AWS Secrets Manager.
        
        Args:
            secret_name (str): The name of the secret.
            region_name (str): The AWS region.
        
        Returns:
            str: The value of the secret.
        """
        session = boto3.session.Session()
        client = session.client(service_name='secretsmanager', region_name=region_name)
        
        try:
            get_secret_value_response = client.get_secret_value(SecretId=secret_name)
            if 'SecretString' in get_secret_value_response:
                secret = json.loads(get_secret_value_response['SecretString'])
                return secret.get("GPT_API_KEY", "")
            else:
                logging.error(f"Couldn't fetch secret: {secret_name}")
                return ""
        except Exception as e:
            logging.error(f"Error fetching secret: {e}")
            return ""

    def get_gpt_response(self, context: list) -> str:
        """
        Generates a response from OpenAI GPT-3 based on the provided context.

        Args:
            context (list): The list of message objects for the conversation context.

        Returns:
            str: The generated response from the GPT model.
        """

        try:
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=context,
                max_tokens=self.max_tokens,
                temperature=self.temperature,
                top_p=self.top_p,
                frequency_penalty=self.frequency_penalty,
                presence_penalty=self.presence_penalty
            )
            return response['choices'][0]['message']['content']
        except Exception as e:
            logging.error(f"Error interacting with OpenAI API: {e}")
            return "Unable to process your request."

