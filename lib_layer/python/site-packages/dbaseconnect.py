import json
import logging

class DynamoDBHelper:
    """
    DynamoDBHelper: A library to simplify interactions with AWS DynamoDB.

    This helper encapsulates common DynamoDB operations like reading and writing items.
    It is designed to work with different tables by providing the table name during instantiation.

    Attributes:
        dynamodb: The boto3 DynamoDB resource object.
        table_name (str): The DynamoDB table name.

    Author: [Your Name]
    Date: [Current Date]
    Version: 1.0.0
    """

    def __init__(self, dynamodb, table_name: str):
        """
        Initializes the DynamoDBHelper with a given DynamoDB resource and table name.

        Args:
            dynamodb: The boto3 DynamoDB resource object.
            table_name (str): The name of the DynamoDB table to interact with.
        """
        self.dynamodb = dynamodb
        self.table = self.dynamodb.Table(table_name)

    def get_item(self, user_id: str) -> dict:
        """
        Retrieves an item from the DynamoDB table based on the provided user ID.

        Args:
            user_id (str): The unique identifier for the item.

        Returns:
            dict: The retrieved item, or an empty dictionary if the item doesn't exist.
        """
        try:
            response = self.table.get_item(Key={'user_id': user_id})
            return response.get('Item', {})
        except Exception as e:
            logging.error(f"Error reading from DB: {e}")
            return {}

    def put_item(self, item: dict):
        """
        Inserts or updates an item in the DynamoDB table.

        Args:
            item (dict): The item to be inserted or updated.
        """
        try:
            self.table.put_item(Item=item)
        except Exception as e:
            logging.error(f"Error upserting to DB: {e}")

